/*####### release 0, build 005  ########
############## PROJECT α ##############
############# by Sin0psysS ############
#######################################
			
			Build changelog :
001 :	very first operationnal version
		only IT is implemented
		only the shape of the final
		main menu is built, as well as
		the animated icon drawable, yay
		total GUI and syntax mess, it's
		a miracle everything works
		already 1696 lines of code,
		and so much left to do..
002 :	added debug mode structure
		fixed conflicts with the 'GUI'
		variable
		updated sorting arrays to 0.12
		loots
		added debug to the options
003 :	updated icons to 0.13
		debugged the debug
		mc-like menu content theme
		fixed data saving/reading which
		was broken
		added time control features
		fixed time computing/display
		arranged the GUI a little bit.
		Reached 2559 lines of code
		Cleaned up the code a little
		Added bc settings to data
		saving, cleaned up the GUI
		Updated /help and other
		commands
		Upgraded log functions,
		created log folder
004 :	fixed android version
		detecting bug
005 :	Major GUI improvement
		Same for the time jump system*/


var version = 006,rversion=0;

var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get(),
activeNetwork = ctx.getSystemService(ctx.CONNECTIVITY_SERVICE).getActiveNetworkInfo(),
metrics = ctx.getResources().getDisplayMetrics();
ctx.getWindowManager().getDefaultDisplay().getMetrics(metrics);

var path = android.os.Environment.getExternalStorageDirectory().getAbsolutePath()+"/games/com.mojang/minecraftpe/mods",
logPath = android.os.Environment.getExternalStorageDirectory().getAbsolutePath()+"/log_project_α";
if(!java.io.File(logPath).exists())
	java.io.File(logPath).mkdirs();
if(!java.io.File(path).exists())
	java.io.File(path).mkdirs();
path += "/by_Sin0psysS";
if(!java.io.File(path).exists())
	java.io.File(path).mkdirs();
path += "/project_α";
if(!java.io.File(path).exists())
	java.io.File(path).mkdirs();

var B64 = {
	bg_settings:"iVBORw0KGgoAAAANSUhEUgAAAKAAAADACAYAAACDO2h3AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAA7CAAAOwgEVKEqAAAAAB3RJTUUH3woDESoTgYj3pAAAA6lJREFUeNrt1zFrFFsYx+H/mTkzRZoIIioETOOXEPGTaCXaqgiWBsHazs9gayFpRSWCYGdnpWIkkWyjiZg12XOLexX1XoQLSZp9HhjYWd7qnd/OYUtrLZ8+fcrZs2fffPz4MXPkVJIhyewPM12Sb0k2woG4c+dObt++vfz9vrx48SIPHjxo4zim6zob4lDt7u5maWkp169fL13XJTdu3GjLy8ttc3OzwWFbWVlpJ06caE+ePGmttdRaa16+fJnjx4/7eXLorl69mtOnT+fixYu5detWq6WUf8W3sbGR3d3d9H1vYxyYWmvevn2byWSScRyzurqa+vvQ9vZ23r9/n+3t7dRabY0DUUrJMAx5+vRp1tbWcu7cuTx//vzXADc3N/Pu3bvs7e1lHMe5WEprTR1HoOu69H2fWmtqrdnf3//7889D0+k0X758yTAMKaXMRYAc7b6/X621lFLS/VelcGRvRitAgAgQBIgAQYAIEASIAEGACBAEiABBgAgQBIgAQYAIEASIAEGACBAEiABBgAgQBIgAQYAIEASIABEgCBABggARIAgQAYIAESAIEAGCABEgCBABggARIAgQAYIAESAIEAGCABEgCBABggARIAgQAYIAESACBAEiQBAgAgQBIkAQIAIEASJAECACBAEiQBAgAgQBIkAQIAIEASJAECACBAEiQBAgAgQBIkAECAJEgCBABAgCRIAgQAQIAkSAIEAECAJEgCBABAgCRIAgQAQIAkSAIEAECAJEgCBABAgCRIAgQASIAEGACBAEiABBgAgQBIgAQYAIEASIAEGACBAEiABBgAgQBIgAQYAIEASIAEGACBAEiABBgAgQBIgAESAIEAGCABEgCBABggARIAgQAYIAESD8L6WUjOOYWusv39ffh36+5mEpHM2eW2uZTCbZ2dn5Ze+1tfbjpu/7jOOYrus8HA7MOI6ZTCZ5+PBh1tfXMwzDj77q3t5eVlZWcuXKlXz48CGPHz9OrTVd53TmYPR9n52dnayvr+fr169ZWFjIOI6ZTqepZ86cyd27d3Py5Ml8/vw5z549S9/3c3ME/3wCcLi7HoYhCwsLmc1m2drayuLiYspsNmtra2u5dOlSSik5f/589vf3PRgO7Y/I1tZWHj16lGvXrqX8E1q7f/9+VldX8/r167l5A3L0ptNpFhcXc+HChVy+fLmU2Wz2PbY39+7dy82bN+dlF6eSDElmf5jpknxLsiGdg7O0tJRXr14tHzt2LH8BaM02nXRvrgwAAAAASUVORK5CYII=",
	bg_tab_1:"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",
	bg_tab_2:"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",
	btn_np:"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TUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTA5LTExVDIyOjMxOjQ0PC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMDktMTFUMjI6MzE6MzM8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MTI4PC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6UGl4ZWxZRGltZW5zaW9uPjQ4PC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CoTXvMoAAAEhSURBVHgB7ZyxDYNAFMUOxP6LpIpElIaKHYjENETXeQf7qtc+P+vKvxzv1zN6WgKrtnnFx2c/xjY53NcvHEIC3/Mc/QDC4Vk5AUhDmBNAODorJwBpCHMCCEdn5QQgDWFOAOHorJwApCHMCSAcnZUTgDSEOQGEo7NyApCGMCeAcHRWTgDSEOYEEI7OyglAGsKcAMLRWTkBSEOYE0A4OisnAGkIcwIIR2flBCANYU4A4eisnACkIcwJIBydlROANIQ5AYSjs3ICkIYwJ4BwdFZOANIQ5gQQjs7KCUAawpwAwtFZOQFIQ5gTQDg6KycAaQhzAghHZ+UEIA1hTgDh6KycAKQhzAkgHJ2VE4A0hDkBhKOzcgKQhjBv82L0PBrccxL4A+8QDr/rw2ZtAAAAAElFTkSuQmCC",
	btn_p:"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TUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTA5LTExVDIyOjM3OjMwPC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMDktMTFUMjI6Mzc6MjA8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MTI4PC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6UGl4ZWxZRGltZW5zaW9uPjQ4PC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+ClZEXB0AAAElSURBVHgB7ZyxDQJBEMQOdFWQISEBTXxEgqD9R6Ia0GXuwd5o0vE43sPtev+NTknguW1jruYrdD4Cr/djHH21a0wCCUAawpwAwtFZOQFIQ5gTQDg6KycAaQhzAghHZ+UEIA1hTgDh6KycAKQhzAkgHJ2VE4A0hDkBhKOzcgKQhjAngHB0Vk4A0hDmBBCOzsoJQBrCnADC0Vk5AUhDmBNAODorJwBpCHMCCEdn5QQgDWFOAOHorJwApCHMCSAcnZUTgDSEOQGEo7NyApCGMCeAcHRWTgDSEOYEEI7OyglAGsKcAMLRWTkBSEOYE0A4OisnAGkIcwIIR2flBCANYU4A4eisnACkIcwJIBydlROANIR5rkfR62lw5yQwL+fT+O4fZ/tajz8v+gjF0rnaDAAAAABJRU5ErkJggg==",
	font:"",
	close_btn_np:"iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsBAAALAQE2cE9bAAAAB3RJTUUH3woDEzcbc7vH5AAAAdVJREFUOMt9lM9qFEEQxn81zEt4UJA8wgrrQQlK1vMu2V3ci2TXkzF5KJODoIKLIEEE8e7Zmzc9+BBT9Xnonp7eTUzD0DNVX/356use+7p9pzt37wGAAeKWpQzaXZ++fKMB+Pvn94C7dd2c5OLNJa1ZauP71dV/a2ovVY25uHwPGI2kAr7WkNlOAss22y8j0ZiBlIGW9sV6w2K9SaAqcLnZsDxZ7xZVCmxSESuOlCC/n2xSlcouYFlh+q7biEgVpGvczGC5eUmhr8He2xI1aDxERBAKPJzZYjWw1xBdz2U6XyW8AoWQROPuuAfepf346LAkq49Vr9RsseL46DDhOy8yteEdEkREDhCzp48pIvTKSQiYPnmEuxcp00RE07nj4XRdesKDF69OK3raGerJ6WsiAvcgPI1EIZrwwLvITmd9dp5U1O5ZHoYL67NzIhcPiUC03nUICPeBipSTiWme1/bDW2phvYsyPAOayNw9KzedPy/HYbZY8ezhAybjEdP5oOZsscIVBIGZwESbelepNBmPimqT8Qjl7vbt9QwNo010qFTaBdbXdjIeFcoDrXSvWgN+/PzF9uPnAuqdZGlre/2dxOh9wMH9Aw3yQE22BGeAbvhpGcY/q648uVrl79QAAAAASUVORK5CYII=",
	close_btn_p:"iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsBAAALAQE2cE9bAAAAB3RJTUUH3woDEzgIcJ2a9QAAAapJREFUOMullLFuE0EQhr85+Rko4BmMZIqkSCRTJ3EHiY8muZNsKVdT0fMKNBS8gEVFQ4GFhBAtNR0NFLzCzQzF7u3u2SYgMc2eZv/7Z/75505evnju9+4/AAABnDvCI2gc7z9+pgL49fNHxt0Zh0k2mw0TkdDGl+32jzV9h6rEbN6+A4TK3RN4ryGREYHEnBwoU4mAewRKOC+WNRfLOoCKFxd1zeJquVM03FahiKSLQBCfr+pQpcg7sCgwQ0zMLFRw39MmAov6GUm+5/yQGyZWqTlmhrmhprTrLqv3/HY5l2bVBbxbIqtUFVVD+3Cenx4nsnKtBqfadcf56XHA95qluSnuuVXHOTs5IpkwOOeOA2cnRyPsEFWvilrsSg0358n1TSHPR6vw9PoGs4xNRKaG9hYvlcumDS76eJfzcOGyaTFT+lKaqeKAqWYp7pHMaeK83rx+RWms9jZyuLKoXaNzzeo2rUO77nj86CHz2ZRmld1s1x3qhpHJJqH3PLb5bJpcm8+meOxuN7+3kEEOhUuHgJ4IBsm7X/NEgK/fvvNh+4n/CeEf/0R/i9/1SwY7rsoFWgAAAABJRU5ErkJggg==",
	click:"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",
	frames:["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"]
},
time = {
	ticks:null,
	day:null,
	hour:null,
	minutes:null,
	seconds:null,
	suffix:null,
	string:null
};

var graphics = {
	scaledBitmapDrawableFromB64:function(string,x,y) {
		return 	new android.graphics.drawable.BitmapDrawable(android.graphics.Bitmap.createScaledBitmap(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(string, 0), 0, android.util.Base64.decode(string, 0).length),x*dp,y*dp,false));
	},
	scaledBitmapFromB64:function(string,x,y) {
		return android.graphics.Bitmap.createScaledBitmap(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(string, 0), 0, android.util.Base64.decode(string, 0).length),x*dp,x*dp,false);
	},
	bitmapDrawableFromB64:function(string) {
		var of_the_Jedi = new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(string, 0), 0, android.util.Base64.decode(string, 0).length));
		of_the_Jedi.setFilterBitmap(false);
		of_the_Jedi.setAntiAlias(false);
		return of_the_Jedi;
	},
	scaledBitmapFromItemOpaque:function(rank_x,rank_y) {
		var item_opaque = ModPE.openInputStreamFromTexturePack("images/items-opaque.png");
		return android.graphics.Bitmap.createScaledBitmap(android.graphics.Bitmap.createBitmap(android.graphics.BitmapFactory.decodeStream(item_opaque),rank_x*16,rank_y*16,16,16),32*dp,32*dp,false);
	},
	animatedDrawableFromB64Array:function(array,x,y,lapse) {
		var animation = new android.graphics.drawable.AnimationDrawable();
		for(var i in array)
			animation.addFrame(new android.graphics.drawable.BitmapDrawable(android.graphics.Bitmap.createScaledBitmap(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(array[i], 0), 0, android.util.Base64.decode(array[i], 0).length),x*dp,y*dp,false)),lapse);
		return animation;
	}
};

var GUI = {
	main:{
		id:null,
		tab:1
	},
	icon:{
		id:null,
		pressed:false,
		mX:null,
		mY:null
	},
	settings:{
		id:null
	},
	size:1,
	sizeFactor:0,
	setMcText:function(view,text) { //Very clever idea by @TaQuItO_988
		text = text.split("\n").join("<br/>");text = text.split("§o").join("</i><i>");text = text.split("§l").join("</b><b>");text = text.split("§0").join("</font><font color=#000000>");text = text.split("§1").join("</font><font color=#0000AA>");text = text.split("§2").join("</font><font color=#00AA00>");text = text.split("§3").join("</font><font color=#00AAAA>");text = text.split("§4").join("</font><font color=#AA0000>");text = text.split("§5").join("</font><font color=#AA00AA>");text = text.split("§6").join("</font><font color=#FFAA00>");text = text.split("§7").join("</font><font color=#AAAAAA>");text = text.split("§8").join("</font><font color=#555550>");text = text.split("§9").join("</font><font color=#5555FF>");text = text.split("§a").join("</font><font color=#55FF55>");text = text.split("§b").join("</font><font color=#55FFFF>");text = text.split("§c").join("</font><font color=#FF5555>");text = text.split("§d").join("</font><font color=#FF55FF>");text = text.split("§e").join("</font><font color=#FFFF55>");text = text.split("§f").join("</font><font color=#FFFFFF>");
		view.setText(android.text.Html.fromHtml(text));
	}
};

var settings = {
	smart_tools:"on",
	destacking:"off",
	wifi_only:false,
	debug_mode:true
}

//debug mode
var sdf = new java.text.SimpleDateFormat("yyMMdd_HHmm"),
date = sdf.format(new java.util.Date());
var log = {
    str: "Project α by Sin0psysS release "+rversion+" dev "+version +
         "\nMCPE v" + ModPE.getMinecraftVersion() +
         "\nAndroid API Level " + android.os.Build.VERSION.SDK_INT +
         "\n" + ctx.getPackageName() + " v" + ctx.getPackageManager().getPackageInfo(ctx.getPackageName(), 0).versionName +
         "\n-----",
    lock: new java.util.concurrent.Semaphore (1, true),
    e: function (msg, e) {log.write("Error: " + msg + ", " + e + " (" + e.fileName + " #" + e.lineNumber + ")"); },
    write: function (msg) {
        if (settings.debug_mode) {
            this.lock.acquire();
            try {
                this.str += "\n" + msg;
                var logFile = new java.io.File(logPath+"/log_project_α.txt");
				if(logFile.exists()){
					logFile.delete();
					logFile.createNewFile();
				}
				var logFile = new java.io.File(logPath+"/log_project_α_"+date+".txt");
				if (logFile.exists())
					logFile.delete();
				logFile.createNewFile();
				var stream = new java.io.OutputStreamWriter(new java.io.FileOutputStream(logFile));
				stream.append(this.str);
				stream.close();
                toast("log: " + msg,"blue");
            }
			finally {
                this.lock.release();
            }
        }
    }
};

//others
var sb,dp,dead = 0,timer = 0,loop = 20,sdisp = false,sdisp2 = false,dpos,past_data = [];

//Sound file
var play=new android.media.MediaPlayer();
var file=new java.io.File(path+"/click.m4a");
if(!file.exists()) {
	file.createNewFile();
	var stream=new java.io.FileOutputStream(file);
	stream.write(android.util.Base64.decode(B64.click,0));
	stream.close();
	log.write("created sound file");
}

//Font file
var fontFile = new java.io.File(path + "/mcfont.ttf");
if(!fontFile.exists()) {
	fontFile.createNewFile();
	var fileOutputStream = new java.io.FileOutputStream(fontFile);
	fileOutputStream.write(android.util.Base64.decode(B64.font, 0));
	fileOutputStream.close();
	log.write("created font file")
}
var font = new android.graphics.Typeface.createFromFile(path + "/mcfont.ttf");

//Default-sized drawables
dp = metrics.density*GUI.size,
displayWidth = (metrics.widthPixels*GUI.size)/dp,
displayHeight = (metrics.heightPixels*GUI.size)/dp;
if(displayWidth<displayHeight) {
	var sto = displayHeight;
	displayHeight = displayWidth;
	displayWidth = sto;
log.write("Corrected screen dimension orientation (initial))");
}
var buttonX=5*dp,buttonY=5*dp;

var bitmaps = {
	bg_settings:graphics.scaledBitmapDrawableFromB64(B64.bg_settings,(displayWidth/2)+40,displayHeight-5),
	bg_tab_1:graphics.scaledBitmapDrawableFromB64(B64.bg_tab_1,(displayWidth/2)+40,displayHeight-5),
	bg_tab_2:graphics.scaledBitmapDrawableFromB64(B64.bg_tab_2,(displayWidth/2)+40,displayHeight-5),
	btn_np:graphics.bitmapDrawableFromB64(B64.btn_np),
	btn_p:graphics.bitmapDrawableFromB64(B64.btn_p),
	close_btn_np:graphics.scaledBitmapFromB64(B64.close_btn_np,36,36),
	close_btn_p:graphics.scaledBitmapFromB64(B64.close_btn_p,36,36),
	ic:graphics.scaledBitmapFromItemOpaque(13,4),
	ic2:graphics.scaledBitmapFromItemOpaque(3,9),
	settings_icon:android.graphics.Bitmap.createScaledBitmap(android.graphics.Bitmap.createBitmap(android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/gui/touchgui.png")),219,0,20,20),32*dp||32*dp,32*dp||32*dp,false),
	nether_star:graphics.animatedDrawableFromB64Array(B64.frames,32,32,80)
};

//resizing drawables
function resize() {
	GUI.size = 1+(0.01*GUI.sizeFactor),
	dp = metrics.density*GUI.size,
	displayWidth = (metrics.widthPixels*GUI.size)/dp,
	displayHeight = (metrics.heightPixels*GUI.size)/dp;
	if(displayWidth<displayHeight) {
		var sto = displayHeight;
		displayHeight = displayWidth;
		displayWidth = sto;
		log.write("Corrected screen dimension orientation");
	}
bitmaps = {
	bg_settings:graphics.scaledBitmapDrawableFromB64(B64.bg_settings,(displayWidth/2)+40,displayHeight-5),
	bg_tab_1:graphics.scaledBitmapDrawableFromB64(B64.bg_tab_1,(displayWidth/2)+40,displayHeight-5),
	bg_tab_2:graphics.scaledBitmapDrawableFromB64(B64.bg_tab_2,(displayWidth/2)+40,displayHeight-5),
	btn_np:graphics.bitmapDrawableFromB64(B64.btn_np),
	btn_p:graphics.bitmapDrawableFromB64(B64.btn_p),
	close_btn_np:graphics.scaledBitmapFromB64(B64.close_btn_np,36,36),
	close_btn_p:graphics.scaledBitmapFromB64(B64.close_btn_p,36,36),
	ic:graphics.scaledBitmapFromItemOpaque(13,4),
	ic2:graphics.scaledBitmapFromItemOpaque(3,9),
	settings_icon:android.graphics.Bitmap.createScaledBitmap(android.graphics.Bitmap.createBitmap(android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/gui/touchgui.png")),219,0,20,20),32*dp||32*dp,32*dp||32*dp,false),
	nether_star:graphics.animatedDrawableFromB64Array(B64.frames,32,32,80)
}
}

//reading data file
var dataFile=java.io.File(path+"/data.txt");
if(!dataFile.exists()) {
	toast("Thanks for downloading this mod! Have fun!");
	networkPreferencesGUI();
}
else {
	var streamInput = new java.io.FileInputStream(dataFile),bufferedReader= new java.io.BufferedReader(new java.io.InputStreamReader(streamInput)),main="";
	while((row=bufferedReader.readLine())!=null) {
		main+=row+"\n";
	}
	bufferedReader.close();
	main = new String(main);
	main = main.split(":");
	for(var i=1;i<9;i++) {
		main[i]=main[i].split("\n");
	}
	//main[1] = main[1].split("\n"),main[2] = main[2].split("\n"),main[3] = main[3].split("\n"),main[4] = main[4].split("\n"),main[5] = main[5].split("\n"),main[6] = main[6].split("\n"),main[7] = main[7].split("\n"),main[8] = main[8].split("\n");
	settings.smart_tools = main[1][0];
	settings.destacking = main[2][0];
	buttonX = parseFloat(main[3][0]);
	buttonY = parseFloat(main[4][0]);
	if(main[5][0]==undefined)
		networkPreferencesGUI();
	else
		checkForUpdate();
	if(main[5][0]=="true")
		settings.wifi_only = true
	if(main[6][0]=="true")
		settings.debug_mode=true;
	else
		settings.debug_mode=false;
	
	if(main[7][0]=="true")
		sdisp=true;
	else
		sdisp=false;
	if(main[8][0]=="true")
		sdisp2=true;
	else
		sdisp2=false;
	if(main.length>9) {
		main[9]=main[9].split("\n");
		GUI.sizeFactor=parseFloat(main[9][0]);
		resize();
	}
}

function mcButton(text) {
	var mcbtn = new android.widget.Button(ctx);
	GUI.setMcText(mcbtn,text);
	mcbtn.setBackgroundDrawable(bitmaps.btn_np);
	mcbtn.setPaintFlags(mcbtn.getPaintFlags() | android.graphics.Paint.SUBPIXEL_TEXT_FLAG);
	mcbtn.setTextSize(parseInt(GUI.size*14));
	mcbtn.setLineSpacing(0, parseInt(GUI.size*1.15));
	mcbtn.setTypeface(font);
	mcbtn.setTextColor(android.graphics.Color.parseColor("#FFDDDDDD"));
	mcbtn.setPadding(0, 0, 0, 0);
	mcbtn.setTransformationMethod(null);
	if(android.os.Build.VERSION.SDK_INT>19)
		mcbtn.setShadowLayer(1, Math.round(mcbtn.getLineHeight() / 8), Math.round(mcbtn.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
	else
		mcbtn.setShadowLayer(0.0001, Math.round(mcbtn.getLineHeight() / 8), Math.round(mcbtn.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
	mcbtn.setOnTouchListener(function(v, event) {
		var action = event.getActionMasked();
		if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
			mcbtn.setBackgroundDrawable(bitmaps.btn_np);
			mcbtn.setTextColor(android.graphics.Color.parseColor("#FFDDDDDD"));
			mcbtn.setPadding(0, 0, 0, 0);
		}
		else {
			mcbtn.setBackgroundDrawable(bitmaps.btn_p);
			mcbtn.setTextColor(android.graphics.Color.parseColor("#FFFBFF97"));
			mcbtn.setPadding(0, Math.round(mcbtn.getLineHeight() / 8), 0, 0);
		}
		return false;
	});
	return mcbtn;
}

function mcText(text,tsize) {
	var txt = new android.widget.TextView(ctx);
	GUI.setMcText(txt,text);
	txt.setTextColor(android.graphics.Color.WHITE);
	txt.setTypeface(font);
	if(android.os.Build.VERSION.SDK_INT>19)
		txt.setShadowLayer(1, Math.round(txt.getLineHeight() / 8), Math.round(txt.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
	else
		txt.setShadowLayer(0.0001, Math.round(txt.getLineHeight() / 8), Math.round(txt.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
	txt.setLineSpacing(0,parseInt(GUI.size*0, 1.15));
	if(tsize!=null)
		txt.setTextSize(parseInt(GUI.size*tsize));
	else
		txt.setTextSize(parseInt(GUI.size*14));
	return txt;
}

function playSound(sound) {
	try {
		play.stop();
		play.reset();
		play.setDataSource(path+sound);
		play.prepare();
		play.setLooping(false);
		play.start()
	}
	catch(e) {
		log.e("playSound", e);
	}
}

//IT dev30 B64
var bgBase="iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAfxJREFUOI1dkr9r20AYhh87LjjEP6R2kNoi6qh0LBH2VjCITl48dikZ/G90y5K/KFOGgou7FYLloVDI2QJBTqKtpLp2bApGHcwdsm86fd+d3nuf763cXl8WQqYAREkOgO+5HNfCOKNjm7o/ns7xPZcT51njqt2oMwkWGI1TAHZFwZ+Xfb59/YLROMX3XJpndZbrrf75TEim95LK7fVlMZ7Otcpo0EN9l9XUCuMMQJ+rCpny1+riey4d20TIVB9Sao5lAOBYBh3bZDToaYtVgGZyh5ApvucyCRb0L84BtPIkWADwHRcAIVNdq0VJThhnOJaBkKkGpV5Rhvc7+EzTNomSnI5t4nvuIQOAVnfI8u5GW1AvKe8dyyBKchzL2E9BHe7YJo8PP2g39sTDOGNXFMyEpHlWJ1ttWK63LNdbzaWqNuPpHCFTPXf1/CjJNZNybxIsiJJ8z8CxDA2lDE15L188tlJVDQVFWRkNejiWQRhnuh7GGUKmCJnS6g6JkpyTj+/fXimFXVGQrTZ037xgPJ3TbtRZ2z1qqwey1YZqpcJMSF7ZJj/vZ4RxRuXTh3dFGGf0L841WYDXz58eJPB4KStVQF8GmP/6R5TkBwlUNo4TKmS6n4IKk++5PNk9avqTYIHvuTr3xwkFqKmNyrdSbXWHdO5udObVNFRfif4HjC8/LkSmx2oAAAAASUVORK5CYII=";
var matrix = new android.graphics.Matrix();
matrix.postScale(16,16);
var bgBitmap = new android.graphics.Bitmap.createBitmap(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bgBase, 0), 0, android.util.Base64.decode(bgBase, 0).length), 0, 0, 16, 16, matrix, false);
var bgDrawable = new android.graphics.drawable.BitmapDrawable(bgBitmap);
bgDrawable.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
bgDrawable.setAlpha(100);








//Info/settings menu
function settingsMenu() {
	if(GUI.settings.id==null) {
		ctx.runOnUiThread(new java.lang.Runnable() {
			run: function() {
				try {
					ModPE.setGameSpeed(2);
					
					var layout = new android.widget.LinearLayout(ctx);
					layout.setOrientation(1);
					var lParams = new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT,android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
					lParams.setMargins(15*dp,15*dp,15*dp,15*dp);
					var titleLayout = new android.widget.LinearLayout(ctx);
					layout.addView(titleLayout,lParams);

					var title = mcText("\n§eSettings & info\n",17);
					title.setGravity(android.view.Gravity.CENTER);
					titleLayout.addView(title);
					var params = title.getLayoutParams();
					params.weight = 1;
					title.setLayoutParams(params);

					var closeButton = new android.widget.ImageView(ctx);
					closeButton.setImageBitmap(bitmaps.close_btn_np);
					closeButton.setOnTouchListener(function(v, event) {
						var action = event.getActionMasked();
						if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
							closeButton.setImageBitmap(bitmaps.close_btn_np);
						}
						else {
							closeButton.setImageBitmap(bitmaps.close_btn_p);
						}
						return false;
					});
					closeButton.setOnClickListener(function(viewarg) {
						playSound("/click.m4a");
						GUI.settings.id.dismiss();
					});
					titleLayout.addView(closeButton);
					params = closeButton.getLayoutParams();
					params.weight = 1/100000;
					params.setMargins(15*dp,0,0,0);
					closeButton.setLayoutParams(params);

					var line = new android.view.View(ctx);
					line.setBackgroundColor(android.graphics.Color.rgb(51,51,51));
					layout.addView(line,lParams);
					params = new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.FILL_PARENT,1*dp);
					params.setMargins(15*dp,0,15*dp,0);
					line.setLayoutParams(params);

					var contentLayout = new android.widget.LinearLayout(ctx);
					contentLayout.setOrientation(1);
					var scroll = new android.widget.ScrollView(ctx);
					scroll.addView(contentLayout);
					layout.addView(scroll,lParams);

					var sSb = new android.widget.SeekBar(ctx),sBtn;
					sSb.setMax(60);
					sSb.setProgress(GUI.sizeFactor+30);
					sSb.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {  
						onStopTrackingTouch: function(view) {
							GUI.setMcText(sBtn,"Set GUI size to §a"+(sSb.getProgress()-30)+"§f\n(0 = default)")
						}
					});
					contentLayout.addView(sSb);

					sBtn = mcButton("Set GUI size to§a "+GUI.sizeFactor+"\n§f(0 = default)");
					sBtn.setOnClickListener(new android.view.View.OnClickListener() {
						onClick: function(view) {
							playSound("/click.m4a");
							GUI.sizeFactor=sSb.getProgress()-30;
							resize();
							GUI.icon.id.dismiss();
							showIcon();
							GUI.settings.id.dismiss();
							settingsMenu();
						} 
					});
					contentLayout.addView(sBtn);

					var dbToggle = new android.widget.Switch(ctx);
					dbToggle.setText("Debug mode");
					dbToggle.setTextColor(android.graphics.Color.WHITE);
					dbToggle.setTypeface(font);
					dbToggle.setLineSpacing(0, parseInt(GUI.size*1.15));
					dbToggle.setTextSize(parseInt(14*GUI.size));
					if(android.os.Build.VERSION.SDK_INT>19)
						dbToggle.setShadowLayer(1, Math.round(dbToggle.getLineHeight() / 8), Math.round(dbToggle.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
					else
						dbToggle.setShadowLayer(0.0001, Math.round(dbToggle.getLineHeight() / 8), Math.round(dbToggle.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
					dbToggle.setChecked(settings.debug_mode);
					dbToggle.setOnClickListener(new android.view.View.OnClickListener( {
						onClick: function(viewarg) {
							if(!settings.debug_mode) {
								settings.debug_mode=true;
								toast("Logs are saved in the \"log_project_α\" directory.","blue");
							}
							else
								settings.debug_mode=false;
						}
					}));
					contentLayout.addView(dbToggle);
					
					GUI.settings.id = new android.widget.PopupWindow(layout, ((displayWidth*3)/8)*dp, ((displayHeight*3)/4)*dp);
					GUI.settings.id.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);
					layout.setBackgroundDrawable(bitmaps.bg_settings);
					var wm = ctx.getSystemService(ctx.WINDOW_SERVICE),
					params = layout.getLayoutParams();
					params.flags = android.view.WindowManager.LayoutParams.FLAG_DIM_BEHIND;
					params.dimAmount = 0.5;
					wm.updateViewLayout(layout,params);
					GUI.settings.id.setOnDismissListener(function() {
						GUI.settings.id = null;
						ModPE.setGameSpeed(20);
					});
				}
				catch(e) {
					log.e("settingsMenu", e);
				}
			}
		});
	}
}

//main menu
function showMainMenu() {
	if(GUI.main.id==null) {
		ModPE.setGameSpeed(2);
		ctx.runOnUiThread(new java.lang.Runnable() {
			run: function() {
				try {
					var layout = new android.widget.LinearLayout(ctx);
					layout.setOrientation(1);
					var layoutParams = new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT,android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
					layoutParams.setMargins(0,15*dp,15*dp,15*dp);//((displayWidth/2)+40)*(dp/7)+(15*dp)
					var upperLayout = new android.widget.LinearLayout(ctx);
					var titleLayout = new android.widget.LinearLayout(ctx);
					layout.addView(titleLayout,layoutParams);
					
					var title = mcText("\nInventory Tweaks.\n",17);
					title.setGravity(android.view.Gravity.CENTER);
					title.setTextColor(android.graphics.Color.YELLOW);
					titleLayout.addView(title);
					var params = title.getLayoutParams();
					params.weight = 1;
					title.setLayoutParams(params);

					var settingsButton = new android.widget.ImageView(ctx);
					settingsButton.setImageBitmap(bitmaps.settings_icon);
					settingsButton.setOnTouchListener(function(v, event) {
						var action = event.getActionMasked();
						if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
							settingsButton.setAlpha(1);
						}
						else {
							settingsButton.setAlpha(0.4);
						}
						return false;
					});
					settingsButton.setOnClickListener(function(viewarg) {
						playSound("/click.m4a");
						GUI.main.id.dismiss();
						settingsMenu();
					});
					titleLayout.addView(settingsButton);
					params = settingsButton.getLayoutParams();
					params.weight = 1/100000;
					params.setMargins(15*dp,0,0,0);
					settingsButton.setLayoutParams(params);

					var closeButton = new android.widget.ImageView(ctx);
					closeButton.setImageBitmap(bitmaps.close_btn_np);
					closeButton.setOnTouchListener(function(v, event) {
						var action = event.getActionMasked();
						if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
							closeButton.setImageBitmap(bitmaps.close_btn_np);
						}
						else {
							closeButton.setImageBitmap(bitmaps.close_btn_p);
						}
						return false;
					});
					closeButton.setOnClickListener(function(viewarg) {
						playSound("/click.m4a");
						GUI.main.id.dismiss();
						ModPE.setGameSpeed(sb.getProgress()+1);
					});
					titleLayout.addView(closeButton);
					params = closeButton.getLayoutParams();
					params.weight = 1/100000;
					params.setMargins(5*dp,0,0,0);
					closeButton.setLayoutParams(params);

					var line = new android.view.View(ctx);
					line.setBackgroundColor(android.graphics.Color.rgb(51,51,51));
					layout.addView(line);
					params = new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.FILL_PARENT,1*dp);
					params.setMargins(0,0,15*dp,0);//(60*dp,0,10*dp,0);
					line.setLayoutParams(params);

					//Tabs
					var lowerLayout = new android.widget.LinearLayout(ctx);
					layout.addView(lowerLayout);

					var tabLayout = new android.widget.LinearLayout(ctx);
					tabLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
					upperLayout.addView(tabLayout);
upperLayout.addView(layout);


					titleLayout.post(new java.lang.Runnable() {
						run: function() {
							var params = new android.widget.LinearLayout.LayoutParams((displayWidth/2)*(dp/7)+(10*dp),((displayHeight*dp*7)/8));
							//params.weight = 0.0001;
							//params.setMargins(10*dp,70*dp,20*dp,0);//(10*dp,70*dp,0,0);
tabLayout.setLayoutParams(params);
tabLayout.setGravity(android.view.Gravity.CENTER_VERTICAL | android.view.Gravity.CENTER_HORIZONTAL);
//tabLayout.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.RED));
						}
					});

					var tab1 = new android.widget.ImageView(ctx);
					tab1.setImageBitmap(bitmaps.ic);
					tab1.setOnClickListener(function(viewarg) {
						if(GUI.main.tab==2) {
tab1.clearColorFilter();
tab2.setColorFilter(android.graphics.Color.rgb(123,123,123),android.graphics.PorterDuff.Mode.MULTIPLY);
							playSound("/click.m4a");
							GUI.main.tab = 1;
							title.setText("\nInventory Tweaks.\n");
							params = title.getLayoutParams();
							params.weight = 1;
							title.setLayoutParams(params);
							upperLayout.setBackgroundDrawable(bitmaps.bg_tab_1);
							lowerLayout.removeView(scroll2);
							lowerLayout.addView(scroll);
						}
					});
tab1.setOnTouchListener(function(v, event) {
						var action = event.getActionMasked();
						if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
params=new android.widget.LinearLayout.LayoutParams(32*dp,32*dp);
params.setMargins(0,0,0,0);
tab1.setLayoutParams(params);
						}
						else if(action==0) {
							params=new android.widget.LinearLayout.LayoutParams(28*dp,28*dp);
params.setMargins(2*dp,2*dp,2*dp,2*dp);
tab1.setLayoutParams(params);
						}
						return false;
					});
					tabLayout.addView(tab1);

					var tab2 = new android.widget.ImageView(ctx);
					tab2.setImageBitmap(bitmaps.ic2);
					tabLayout.addView(tab2);
					params = tab2.getLayoutParams();
					params.setMargins(0,10*dp,0,0);
					tab2.setLayoutParams(params);
					tab2.setOnClickListener(function(viewarg) {
						if(GUI.main.tab==1) {
tab2.clearColorFilter();
tab1.setColorFilter(android.graphics.Color.rgb(123,123,123),android.graphics.PorterDuff.Mode.MULTIPLY);
							playSound("/click.m4a");
							GUI.main.tab = 2;
							title.setText("\nTime Control.\n");
							params = title.getLayoutParams();
							params.weight = 1;
							title.setLayoutParams(params);
							upperLayout.setBackgroundDrawable(bitmaps.bg_tab_2);
							lowerLayout.removeView(scroll);
							lowerLayout.addView(scroll2);
params = new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.FILL_PARENT,android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
							params.weight = 1;
							params.setMargins(0,15*dp,15*dp,15*dp);
							scroll2.setLayoutParams(params);
						}
					});
tab2.setOnTouchListener(function(v, event) {
						var action = event.getActionMasked();
						if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
params=new android.widget.LinearLayout.LayoutParams(32*dp,32*dp);
params.setMargins(0,10*dp,0,0);
tab2.setLayoutParams(params);
						}
						else if(action==0) {
							params=new android.widget.LinearLayout.LayoutParams(28*dp,28*dp);
params.setMargins(2*dp,13*dp,2*dp,2*dp);
tab2.setLayoutParams(params);
						}
						return false;
					});
tab2.setColorFilter(android.graphics.Color.rgb(123,123,123),android.graphics.PorterDuff.Mode.MULTIPLY);

					//Menu content
					var contentLayout = new android.widget.LinearLayout(ctx);
					contentLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
//contentLayout.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.YELLOW));

					var scroll = new android.widget.ScrollView(ctx);
					scroll.addView(contentLayout);
					lowerLayout.addView(scroll);

					params = new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.FILL_PARENT,android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
					params.weight = 1;
					params.setMargins(0,15*dp,15*dp,15*dp);//(0,15*dp,15*dp,15*dp);
					scroll.setLayoutParams(params);

					
					//inventory Tweaks content
					var txt_1 = mcText("§lClick to sort :");
					contentLayout.addView(txt_1);
txt_1=mcText("Your inventory, chest or double chest\n\n");
contentLayout.addView(txt_1);
	
					var l2 = new android.widget.LinearLayout(ctx);
					l2.setOrientation(android.widget.LinearLayout.HORIZONTAL);
					contentLayout.addView(l2);
					var btn = mcButton("I");
					btn.setOnClickListener(new android.view.View.OnClickListener() {
						onClick: function(view) {
							playSound("/click.m4a");
							GUI.main.id.dismiss();
							ModPE.setGameSpeed(sb.getProgress()+1);
							sort();
						}  
					});
					l2.addView(btn);

					var btn = mcButton("C");
					btn.setOnClickListener(new android.view.View.OnClickListener() {
						onClick: function(view) {
							playSound("/click.m4a");
							GUI.main.id.dismiss();
							ModPE.setGameSpeed(sb.getProgress()+1);
							slotAmount=26;
							show=[80,"Now hit a normal chest to sort it!"];
						}  
					});
					l2.addView(btn);

					var btn = mcButton("2C");
					btn.setOnClickListener(new android.view.View.OnClickListener() {
						onClick: function(view) {
							playSound("/click.m4a");
							GUI.main.id.dismiss();
							ModPE.setGameSpeed(sb.getProgress()+1);
							slotAmount=53;
							show=[80,"Now hit a large chest to sort it!"];
						}  
					});
					l2.addView(btn);

					var txt_2=mcText("\n\nSettings\n\n");
					txt_2.setGravity(android.view.Gravity.CENTER);
					txt_2.setTextColor(android.graphics.Color.YELLOW);
					txt_2.setTextSize(parseInt(GUI.size*17));
					contentLayout.addView(txt_2);

					var txt_3=mcText("§lSmart Tools mode\n");
					contentLayout.addView(txt_3);

					var smButton=mcButton("Auto switch is §a"+settings.smart_tools);
					smButton.setOnClickListener(new android.view.View.OnClickListener() {
						onClick: function(viewarg) {
							playSound("/click.m4a");
							if(settings.smart_tools=="off") {
								settings.smart_tools="on";
							}
							else {
							settings.smart_tools="off";
							}
						GUI.setMcText(smButton,"Auto switch is §a"+settings.smart_tools);
						}
					});
					contentLayout.addView(smButton);

					var txt_4=mcText("\n\n§lSorting options\n");
					contentLayout.addView(txt_4);

					var dsButton=mcButton("No stack limit mode is §a"+settings.destacking);
					dsButton.setOnClickListener(new android.view.View.OnClickListener() {
						onClick: function(viewarg) {
							playSound("/click.m4a");
							if(settings.destacking=="off") {
								settings.destacking="on";
							}
							else {
								settings.destacking="off";
							}
							GUI.setMcText(dsButton,"No stack limit mode is §a"+settings.destacking);
						}
					});
					contentLayout.addView(dsButton);

					/*var txt_5 = mcText("\n\nAdvanced options :\n");
					contentLayout.addView(txt_5);
*/
					//End of IT content

					var contentLayout2 = new android.widget.LinearLayout(ctx);
					contentLayout2.setOrientation(android.widget.LinearLayout.VERTICAL);
					
					var scroll2 = new android.widget.ScrollView(ctx);
					scroll2.addView(contentLayout2);

					
					//Time Control content
					var btn = mcButton("Set time to §anight");
					btn.setOnClickListener(new android.view.View.OnClickListener() {
						onClick: function(view) {
							var ttime = Level.getTime()%-24000
							Level.setTime(Level.getTime()-ttime+13000)
						}  
					});
					contentLayout2.addView(btn);

					var btn = mcButton("Set time to §aday");
					btn.setOnClickListener(new android.view.View.OnClickListener() {
						onClick: function(view) {
							Level.setTime(Level.getTime()-(Level.getTime()%-24000));
						}  
					});
					contentLayout2.addView(btn);

					var text = mcText("\nTime Speed : §a20§f\n(Regular speed = 20)");
					contentLayout2.addView(text);

					sb = new android.widget.SeekBar(ctx);
					sb.setMax(59);
					sb.setProgress(20);
					sb.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {  
						onStopTrackingTouch: function(view) {
							sbProgress=sb.getProgress();
							GUI.setMcText(text,"\nTime Speed : §a"+Math.floor(sb.getProgress()+1)+"§f\n(Regular speed = 20)");
						}  
					});
					contentLayout2.addView(sb);

					var text2 = mcText("Travel backwards in time\nGo back §a10§f seconds ago");
					contentLayout2.addView(text2);

					sb2 = new android.widget.SeekBar(ctx);
					sb2.setMax(39);
					sb2.setProgress(9);
					sb2.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {  
						onStopTrackingTouch: function(view) {
							GUI.setMcText(text2,"Time jump :\nGo back§a "+Math.floor(sb2.getProgress()+1)+" §fseconds ago")
						}
					});
					contentLayout2.addView(sb2);

					var btn = mcButton("Jump now!");
					btn.setOnClickListener(new android.view.View.OnClickListener() {
						onClick: function(view) {
							playSound("/click.m4a");
							GUI.main.id.dismiss();
							ModPE.setGameSpeed(sb.getProgress()+1);
							ModPE.showTipMessage("");
							if(Math.floor(timer-40)>=Math.floor(Math.floor(sb2.getProgress()+1)*20)) {
								timer=timer-Math.floor(Math.floor(sb2.getProgress()+1)*20);
								//setTimeToSituation(Math.floor(sb2.getProgress()+1));
Entity.setPosition(getPlayerEnt(),past_data[sb2.getProgress()+1][0][0][0],past_data[sb2.getProgress()+1][0][0][1],past_data[sb2.getProgress()+1][0][0][2]);
setVelX(getPlayerEnt(),past_data[sb2.getProgress()+1][0][1][0]);
setVelY(getPlayerEnt(),past_data[sb2.getProgress()+1][0][1][1]);
setVelZ(getPlayerEnt(),past_data[sb2.getProgress()+1][0][1][2]);
Entity.setRot(getPlayerEnt(),past_data[sb2.getProgress()+1][0][2][0],past_data[sb2.getProgress()+1][0][2][1]);
Player.setHunger(past_data[sb2.getProgress()+1][0][3]);
Player.setSaturation(past_data[sb2.getProgress()+1][0][4]);
Player.setExhaustion(past_data[sb2.getProgress()+1][0][5]);
Player.setExp(past_data[sb2.getProgress()+1][0][6]);
Player.setFlying(past_data[sb2.getProgress()+1][0][7]);
Player.setHealth(past_data[sb2.getProgress()+1][0][8]);
Level.setRainLevel(past_data[sb2.getProgress()+1][1][0]);
Level.setLightningLevel(past_data[sb2.getProgress()+1][1][1]);
Level.setTime(past_data[sb2.getProgress()+1][1][2]);
							}
							else
								clientMessage("§b[BC] §fYou haven't played "+Math.floor(sb2.getProgress()+1)+" seconds yet!");
						} 
					});
					contentLayout2.addView(btn);

					var btn = mcButton("Warp to my last death location");
					btn.setOnClickListener(new android.view.View.OnClickListener() {
						onClick: function(view) {
							ModPE.setGameSpeed(sb.getProgress()+1);
							ModPE.showTipMessage("");
							playSound("/click.m4a");
							GUI.main.id.dismiss();
							ModPE.setGameSpeed(sb.getProgress()+1);
							if(dead==1)
								setPosition(getPlayerEnt(),dpos[0],dpos[1],dpos[2]);
							else
								clientMessage("§b[BC] §fNo death recorded yet!");
						} 
					});
					contentLayout2.addView(btn);


					var toggle = new android.widget.Switch(ctx);
					toggle.setText("Display IRL time played");
					toggle.setTextColor(android.graphics.Color.WHITE);
					toggle.setTypeface(font);
					toggle.setLineSpacing(0, parseInt(GUI.size*1.15));
toggle.setTextSize(parseInt(14*GUI.size));
					if(android.os.Build.VERSION.SDK_INT>19)
						toggle.setShadowLayer(1, Math.round(toggle.getLineHeight() / 8), Math.round(toggle.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
					else
						toggle.setShadowLayer(0.0001, Math.round(toggle.getLineHeight() / 8), Math.round(toggle.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
					toggle.setChecked(sdisp);
					toggle.setOnClickListener(new android.view.View.OnClickListener( {
						onClick: function(viewarg) {
							if(!sdisp) {
								sdisp=true;
								if(sdisp2) {
									toggle1.setChecked(false);
									sdisp2=false
								}
							}
							else
								sdisp=false;
						}
					}));
					contentLayout2.addView(toggle);
					params = toggle.getLayoutParams();
					params.setMargins(0,15*dp,0,0);
					toggle.setLayoutParams(params);

					var toggle1 = new android.widget.Switch(ctx);
					toggle1.setText("Display Minecraft time");
					toggle1.setTextColor(android.graphics.Color.WHITE);
					toggle1.setTypeface(font);
					toggle1.setLineSpacing(0, parseInt(GUI.size*1.15));
toggle1.setTextSize(parseInt(14*GUI.size));
					if(android.os.Build.VERSION.SDK_INT>19)
						toggle1.setShadowLayer(1, Math.round(toggle1.getLineHeight() / 8), Math.round(toggle1.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
					else
						toggle1.setShadowLayer(0.0001, Math.round(toggle1.getLineHeight() / 8), Math.round(toggle.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
					toggle1.setChecked(sdisp2);
					toggle1.setOnClickListener(new android.view.View.OnClickListener( {
						onClick: function(viewarg) {
							if(!sdisp2) {
								sdisp2=true;
								if(sdisp) {
									toggle.setChecked(false);
									sdisp=false
								}
							}
							else
								sdisp2=false;
						}
					}));
					contentLayout2.addView(toggle1);
					//End of TC content

					//PopupWindow settings
					GUI.main.id = new android.widget.PopupWindow(upperLayout, ((displayWidth/2+40)*dp*7)/8, ((displayHeight*dp*7)/8)-(5*dp));
					GUI.main.id.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);
					//layout.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
upperLayout.setBackgroundDrawable(bitmaps.bg_tab_1);
					GUI.main.tab=1;
					
					wm = ctx.getSystemService(ctx.WINDOW_SERVICE),
					params = upperLayout.getLayoutParams();
					params.flags = android.view.WindowManager.LayoutParams.FLAG_DIM_BEHIND;
					params.dimAmount = 0.5;
					wm.updateViewLayout(upperLayout,params);
				
					GUI.main.id.setOnDismissListener(function() {
						ModPE.setGameSpeed(20);
						GUI.main.id = null;
					});
				}
				catch(e) {
					log.e("mainMenu", e);
				}
			}
		});
	}
}

function showIcon() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				var layout = new android.widget.LinearLayout(ctx);




				var mainButton = new android.widget.Button(ctx);
				mainButton.setBackgroundDrawable(bitmaps.nether_star); 
				bitmaps.nether_star.start();
				//mainButton.setBackgroundDrawable(null);
				mainButton.setAlpha(0.8);
				mainButton.setOnClickListener(function(viewarg) {
					showMainMenu();
					playSound("/click.m4a");
				});


				mainButton.setOnLongClickListener(function(v,t) {
					GUI.icon.pressed=true;
					ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
					return true;
				});
				
				mainButton.setOnTouchListener(function(v, e) {
					if(!GUI.icon.pressed) {
						GUI.icon.mX=e.getX();
						GUI.icon.mY=e.getY();
					}
						var action = e.getAction() 
						if(action==2&&GUI.icon.pressed) {
							var X=parseInt(e.getX()-GUI.icon.mX)*-1/10;
							var Y=parseInt(e.getY()-GUI.icon.mY)*-1/10;
							buttonX += X;
							buttonY += Y;
							GUI.icon.id.update(parseInt(buttonX), parseInt(buttonY), -1, -1);
						}
						if(action==1)
{
							GUI.icon.pressed=false;
mainButton.setAlpha(0.8);
}
if(action==0)
mainButton.setAlpha(0.3);
					return false;
				});
				layout.addView(mainButton);

var params=new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT,android.widget.LinearLayout.LayoutParams.MATCH_PARENT);
mainButton.setLayoutParams(params);

				GUI.icon.id = new android.widget.PopupWindow(layout, 40*dp, 40*dp);
				GUI.icon.id.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, buttonX, buttonY);
			}
			catch(e) {
				log.e("icon",e);
			}
		}
	});
}

//Practically untouched Inventory Tweaks mod r16 dev030

var GUIcr,GUIb,GUIop,GUIc,GUIup,GUInt;
//game data variables
var tools = [[268,283,272,267,276], //swords
[270,285,274,257,278], //picks
[271,286,275,258,279], //axes
[269,284,273,256,277], //shovels
[359], //shears
[259], //flint and steel
[290,294,291,292,293]]; //hoes


var blocks = [[1,4,14,15,16,21,22,24,41,42,43,44,45,48,49,52,56,57,61,62,66,67,71,73,74,87,89,97,98,101,108,109,112,114,121,128,129,133,139,155,156,159,172,173,245,246,255],//pick
[5,17,26,47,53,54,58,63,64,65,68,85,96,107,134,135,136,157,158,162,163,164], //axe
[2,3,12,13,60,78,80,82,110,243,253], //shovel
[18,30,31,32,35,106,171,175,254], //shears
46]; //flint and steel


var order = [276,278,279,277,293, //dia tools
267,257,258,256,292, //iron tools
283,285,286,284,294, //gold tools
272,274,275,273,291, //stone tools
268,270,271,269,290, //wooden tools
261,262,359,259,46,346,345,347, //bow, arrows, shears, flint and steel & tnt, fishing rod, compass, clock
[325,0],[325,1],[325,8],[325,10], //buckets
50, //torches
310,311,312,313,306,307,308,309,302,303,304,305,314,315,316,317,298,299,300,301, //armor
322,354,364,320,297,366,393,400,[350,0],[350,1],357,360,391,260,282,459, //ready-to eat food
58,54,61,62,355,245,116,117,379,145,247, //workbench, chests...

374,373,438,403,384,376,377,378,382,396, //enchantments, potions

57,42,41,152,22,[155,0],[155,1],[155,2],173, //full ores blocks
264,265,266,388,406,331,348,[263,0],[263,1],318,337, //ores/mining
[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],4,3,2,7,13,12,[24,0],[24,1],[24,2], //mining loots
5,280,[17,0],[17,1],[17,2],[162,0],[162,1], //wood & logs

56,15,14,73,74,21,16,153, //silk touch ores
48,49,87,88,89,[97,0],[97,1],[97,2],[97,3],[97,4],[97,5],[98,0],[98,1],[98,2],112,121,255, //rare blocks

321,323,324,330,63,64,71,85,113,96,101,107,139,183,184,185,186,187, //signs, doors, fences
336,405,45, //bricks
[43,0],[43,1],[43,2],[43,3],[43,4],[43,5],[43,6],[43,7],[44,0],[44,1],[44,2],[44,3],[44,4],[44,5],[44,6],[44,7],157,158, //slabs
53,114,128,156, //stairs
328,329,333,27,66,65, //transports

19,20,26,30,47,78,79,80,91,95,102,170,390,140,144,397,246, //decoration
[351,0],[351,1],[351,2],[351,3],[351,4],[351,5],[351,6],[351,7],[351,8],[351,9],[351,10],[351,11],[351,12],[351,13],[351,14],[351,15], //dyes
[35,0],[35,1],[35,2],[35,3],[35,4],[35,5],[35,6],[35,7],[35,8],[35,9],[35,10],[35,11],[35,12],[35,13],[35,14],[35,15], //wool
[171,0],[171,1],[171,2],[171,3],[171,4],[171,5],[171,6],[171,7],[171,8],[171,9],[171,10],[171,11],[171,12],[171,13],[171,14],[171,15], //carpets
82,172,[159,0],[159,1],[159,2],[159,3],[159,4],[159,5],[159,6],[159,7],[159,8],[159,9],[159,10],[159,11],[159,12],[159,13],[159,14],[159,15], //clay

281,363,319,[349,0],[349,1],365,414,392,394,457, //raw food
287,288,289,334,341,344,352,367,369,370,375,371,[349,2],[349,3], //hunting loots, non edible fishes
[6,0],[6,1],[6,2],[6,3],[6,4],[6,5],18,31,32,37,[38,0],[38,1],[38,2],[38,3],[38,4],[38,5],[38,6],[38,7],[38,8],39,40,59,81,83,86,99,100,103,106,111,[161,0],[161,1],[175,0],[175,1],[175,2],[175,3],[175,4],[175,5],254,295,296,338,353,361,362,458,332,335,26,339,104,105,110,141,142,253,[161,0],[161,1],243,244,115,372, //plants

[383,10],[383,11],[383,12],[383,13],[383,14],[383,15],[383,16],[383,17],[383,19],[383,32],[383,33],[383,34],[383,35],[383,36],[383,37],[383,38],[383,39],[383,40],[383,41],[383,42], //spawn eggs
339,340,8,9,10,11,51,52,60,92,198,90,120,248,249, //misc, glitch
];

var stack = [[256,257,258,259,261,267,268,269,270,271,272,273,274,275,276,277,278,279,282,283,284,285,286,290,291,292,293,294,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,324,328,329,330,333,346,354,355,359,459,116,117,373,379,403,438,], //1s
[323,325,344,140,390,374,397]]; //16s

var empty = [0,6,27,31,32,37,38,39,40,50,51,59,63,66,68,78,104,105,111,127,141,142,171,175];
var inventory = [],chest = [];


//mod tweaks variables
var slotAmount = 0,rmq = 0,debug = 0,cords = [],show = [0,""];

//auto update
function checkForUpdate(){
if(activeNetwork!=null&&activeNetwork.isConnectedOrConnecting()) {
	if(settings.wifi_only&&activeNetwork.getType()==1||!settings.wifi_only) {
		var versionInfo=loadTxtFromUrl("https://raw.githubusercontent.com/Sin0psysS/ModPE/master/pa_versionInfo").split(" ; ");
		if(Number(versionInfo[1])>version) {
			ctx.runOnUiThread(new java.lang.Runnable() {
				run: function() {
					pd = android.app.ProgressDialog.show(ctx,"Project Alpha","Downloading update data, please wait...");
				}
			});
			newCode=loadTxtFromUrl("https://raw.githubusercontent.com/Sin0psysS/ModPE/master/pa_lastVersion");
			updateTo(versionInfo);
		}
	}
}
}


/*HOOKS*/


function newLevel() {
past_data=[];
timer=0;
	deleteGUIup();
		deleteGUInt();
	//icon
	showIcon();
}

function leaveGame() {
	//saving data
	var dataFile = java.io.File(path+"/data.txt");
	if(dataFile.exists())
		dataFile.delete();
	dataFile.createNewFile();
	var content = new String("smart_tools:"+settings.smart_tools+"\ndestacking:"+settings.destacking+"\nbutton_x:"+buttonX+"\nbutton_y:"+buttonY+"\nwifi_only:"+settings.wifi_only+"\ndebug:"+settings.debug_mode+"\nchrono:"+sdisp+"\nmctime:"+sdisp2+"\ngui_size:"+GUI.sizeFactor);
	var printWriter = new java.io.PrintWriter(dataFile);
	printWriter.print(content);
	printWriter.close();

		ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			if(GUI.icon.id!=null) {
				GUI.icon.id.dismiss();
}
		}
	});
	
	//clearing GUI
	deleteGUIb();
	deleteGUIop();
}


//auto switching and sorting
function startDestroyBlock(x,y,z) {
	cords=[x+0.5,y+0.5,z+0.5]; //particle effect when auto switching : where to create it
	correctTool(getCarriedItem(),getTile(x,y,z),false);
}

function useItem(x,y,z,i,b) {
	if(slotAmount!=0&&getTile(x,y,z)==54) {
		preventDefault();
		sortChest(x,y,z,slotAmount);
		slotAmount=0;
	}
	if(b==46&&i!=46) {
		correctTool(i,b,false);
	}
}

function destroyBlock(a,b,c) {
	cords=[a+0.5,b+0.5,c+0.5]
	startDestroyBlock(a,b,c);
}

function attackHook() {
	correctTool(getCarriedItem(),null,true);
}


//help message and manual mod control
function procCmd(cmd) {
	var c = cmd.split(" ");
	if(c[0]=="help") {
		helpMsg(c[1])
	}
	if(c[0]=="delete"&&c[1]=="data"){
		settings.smart_tools="on",settings.destacking="off",settings.wifi_only=false,buttonX = 5*dp,buttonY = 25*dp,sdisp=false,sdisp2=false;
		clientMessage("Deleted data!");
leaveGame();
newLevel();
networkPreferencesGUI();
	}
	if(c[0]=="hidegui") {
		ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			if(GUI.icon.id!=null) {
				GUI.icon.id.dismiss();
GUI.icon.id=null;
}
		}
	});
	}
	if(c[0]=="showgui") {
		if(GUI.icon.id==null) {
			showIcon();
		}
		else {
			show=[80,"The GUI is already displayed!"];
		}
	}
	if(c[0]=="sort") {
		if(c[1]=="chest") {
			slotAmount=26;
			show=[80,"Now hit a normal chest to sort it!"];
		}
		else if(c[1]=="largechest"||c[1]=="large"&&c[2]=="chest") {
			slotAmount=53;
			show=[80,"Now hit a large chest to sort it!"];
		}
		else if(c[1]=="inv"||c[1]=="inventory") {
			sort();
		}
		else {
			helpMsg(c[1])
		}
	}
}

function helpMsg(page) {
if(page=="3") {
clientMessage("§l§8[Project Alpha] §r§o§7 Help page 3 of 3\n§7> Smart tools mode will place the right tool in your hand when you start breaking a block (if you have it), and even craft it for you if you feel lazy.\n§7> Time travel sets your position, health, and game time back to how they were up to 40 seconds ago.\n§7> No stack limits mode allows similar items to regroup when sorting the inventory, and thus uses less slots.\n\n§7§oContact §8@Sin0psysS§7 to report any bug or problem encountered!\n§lEnjoy the mod!");
}
	else if(page=="2"){
		clientMessage("§l§8[Project Alpha] §r§o§7 Help page 2 of 3\n§7> §f§o/sort inv§7 to sort your inventory ;\n§7> §f§o/sort chest§7 (then hit a regular chest)§7 to sort a small chest ;\n§7> §f§o/sort large chest§7 (then hit a large chest)§7 to sort a large chest.\n§7> §oInfo about the features is on page 3.")
	}
	else {
		clientMessage("§l§8[Project Alpha] §r§o§7 A little help there ? - page 1 of 3\n§7> §fCommands additionnal to the§o GUI§r :\n§7> §f§o/delete data to reset preferences\n§7> §f§o/showgui §7/§f /hidegui§7 to hide or display the button\n§7> §oManual triggers for the Inventory Tweaks are on next page.");
	}
}


//Timers
function modTick(){
	timer++;

	//back to last death infos
	if(Entity.getHealth(getPlayerEnt())<=0) {
		dead=1;
		dpos=[Player.getX(),Player.getY()+2,Player.getZ()];
		ModPE.setGameSpeed(20);
	}
	
	//time updating
	time.ticks=Level.getTime()%-24000;
	time.day=parseInt(Level.getTime()/24000);
	time.hour=(parseInt(time.ticks/1000)+6)%-24;
	time.minutes=parseInt(0.06*(time.ticks%-1000));
	time.seconds=parseInt(3.6*(time.ticks%-1000))%-(60);
	if(time.ticks>6000&&time.ticks<18000)
		time.suffix="pm";
	else
		time.suffix="am";
	time.string=new String("Day #"+time.day+" - "+time.hour+":"+time.minutes+" "+time.seconds+"\" "+time.suffix);
	time.string2=new String("Day #"+time.day+" - "+time.hour+":"+time.minutes+" "+time.suffix);

	if(sdisp2)
		ModPE.showTipMessage("   §7"+time.string2);

	if(sdisp&&timer>=21) {
		var disptimer=timer-20;
		ModPE.showTipMessage("    §7"+parseInt(disptimer/1200)+"' "+ (parseInt(disptimer/20)- (parseInt(disptimer/1200)*60)) +"''");
	}

if(loop>0)
loop--;
else{
loop=20;
past_data.unshift([//Player info
[[Player.getX(),Player.getY(),Player.getZ()],
[Entity.getVelX(getPlayerEnt()), Entity.getVelY(getPlayerEnt()), Entity.getVelZ(getPlayerEnt())],
[Entity.getYaw(getPlayerEnt()),Entity.getPitch(getPlayerEnt())],
Player.getHunger(),
Player.getSaturation(),
Player.getExhaustion(),
Player.getExp(),
Player.isFlying(),
Entity.getHealth(getPlayerEnt())],

//Level info
[/*placedBlocks,
destroyedBlocks,
newEntities,
goneEntities,*/
Level.getRainLevel(),
Level.getLightningLevel(),
Level.getTime()]]);
}

if(past_data.length>199)
past_data.pop();
	
	
	if(show[0]>0){
		show[0]--;
		ModPE.showTipMessage("§o  "+show[1]);
	}
	if(debug>0)
		debug--
}


/*SORTING FUNCTIONS*/


//inventory
function sort() {
	var ans=null;
	inventory=[],rmq=0;
	for(var j=0;j<=order.length-1;j++) {
		for(var i=9;i<=44;i++) {
			if(typeof order[j]=="object") {
				if(Player.getInventorySlot(i)==order[j][0]&&Player.getInventorySlotData(i)==order[j][1]) {
					ans=[order[j][0],order[j][1],count([[order[j][0],order[j][1]]])];
				}
			}
			else {
				if(Player.getInventorySlot(i)==order[j]) {
					ans=[order[j],Player.getInventorySlotData(i),count([[order[j],Player.getInventorySlotData(i)]])];
				}
			}
			if(ans!=null) {
				add(ans,null);
				del(ans[0],ans[1],null);
				ans=null
			}
		}
	}
	createSortedInventory();
	show=[60,"Inventory sorted!"];
}

function createSortedInventory() {
	for(var i=9;i<=44;i++) {
		if(Player.getInventorySlot(i)!=0) {
			inventory.push([Player.getInventorySlot(i),Player.getInventorySlotData(i),Player.getInventorySlotCount(i)]);
			log.write("Couldn't recognize id: "+Player.getInventorySlot(i)+" (inventory)");
Player.clearInventorySlot(i);
if(rmq==0) {
				clientMessage("§l§8[Inventory Tweaks] §r§oI found items I didn't know where to sort, so I put them in the end.");
				rmq++
			}
		}
	}
	for(var i=0;i<=inventory.length-1;i++) {
		if(settings.destacking=="on") {
			net.zhuoweizhang.mcpelauncher.ScriptManager.nativeSetInventorySlot(i+9,inventory[i][0],inventory[i][2],inventory[i][1]);
		}
		else {
			if(i<=35) {
				net.zhuoweizhang.mcpelauncher.ScriptManager.nativeSetInventorySlot(i+9,inventory[i][0],inventory[i][2],inventory[i][1]);
			}
			else {
				drop(inventory[i][0],inventory[i][2],inventory[i][1]);
				if(rmq<2) {
					clientMessage("§l§8[Inventory Tweaks] §r§oThere happened to be too many items for your inventory, so I dropped them aside.");
					rmq=2;
				}
			}
		}
	}
}


//chest
function sortChest(x,y,z,le) {
	var ans3=null;
	chest=[],rmq=0;
	for(var j=0;j<=order.length-1;j++) {
		for(var i=0;i<=le;i++) {
			if(typeof order[j]=="object") {
				if(Level.getChestSlot(x,y,z,i)==order[j][0]&&Level.getChestSlotData(x,y,z,i)==order[j][1]) {
					ans3=[order[j][0],order[j][1],count([[order[j][0],order[j][1]]],"chest",[x,y,z,le])];
				}
			}
			else {
				if(Level.getChestSlot(x,y,z,i)==order[j]) {
					ans3=[order[j],Level.getChestSlotData(x,y,z,i),count([[order[j],Level.getChestSlotData(x,y,z,i)]],"chest",[x,y,z,le])];
				}
			}
			if(ans3!=null) {
				add(ans3,"chest");
				del(ans3[0],ans3[1],[x,y,z,le]);
				ans3=null
			}
		}
	}
	createSortedChest(x,y,z,le);
	show=[60,"Chest sorted!"];
}

function createSortedChest(x,y,z,le) {
	for(var i=0;i<=le;i++) {
		if(Level.getChestSlot(x,y,z,i)!=0) {
			chest.push([Level.getChestSlot(x,y,z,i),Level.getChestSlotData(x,y,z,i),Level.getChestSlotCount(x,y,z,i)]);
			log.write("Couldn't recognize id: "+Level.getChestSlot(x,y,z,i)+" (chest)");
Level.setChestSlot(x,y,z,i,0,0,0);
			if(rmq==0) {
				clientMessage("§l§8[Inventory Tweaks] §r§oI found items I didn't know where to sort, so I put them in the end.");
				rmq++
			}
		}
	}
	for(var i=0;i<=chest.length-1;i++) {
		if(settings.destacking=="on") {
			Level.setChestSlot(x,y,z,i,chest[i][0],chest[i][1],chest[i][2]);
		}
		else {
			if(i<=le) {
				Level.setChestSlot(x,y,z,i,chest[i][0],chest[i][1],chest[i][2]);
			}
			else {
				drop(chest[i][0],chest[i][2],chest[i][1]);
				if(rmq<2) {
					clientMessage("§l§8[Inventory Tweaks] §r§oThere happened to be too many items for this chest, so I dropped them aside.");
					rmq=2;
				}
			}
		}
	}
}


//complements for sorting only)
function add(item,isChest) {
	var count2=item[2];
	if(isChest==null) {
		if(settings.destacking=="on") {
			if(count2-255>=0)	{
				inventory.push([item[0],item[1],255]);
				item[2]-=255;
				add(item);
			}
			else {
				inventory.push(item);
			}
		}
		else {
			if(count2-getStack(item[0])>=0) {
				inventory.push([item[0],item[1],getStack(item[0])]);
				item[2]-=getStack(item[0]);
				add(item);
			}
			else if(item[2]!=0) {
				inventory.push(item);
			}
		}
	}
	else {
		if(settings.destacking=="on") {
			if(count2-255>=0) {
				chest.push([item[0],item[1],255]);
				item[2]-=255;
				add(item,"chest");
			}
			else {
				chest.push(item);
			}
		}
		else {
			if(count2-getStack(item[0])>=0) {
				chest.push([item[0],item[1],getStack(item[0])]);
				item[2]-=getStack(item[0]);
				add(item,"chest");
			}
			else if(item[2]!=0)	{
				chest.push(item);
			}
		}
	}
}

function getStack(id) {
	var ans2=null;
	for(var r=0;r<=stack[0].length-1;r++) {
		if(id==stack[0][r]) {
			return 1;
			ans2=1;
		}
	}
	for(var r=0;r<=stack[1].length-1;r++) {
		if(id==stack[1][r]) {
			return 16;
			ans2=1;
		}
	}
	if(ans2==null){
		return 64;
	}
}

function del(id,data,co) {
	if(co==null) {
		for(var i=9;i<=44;i++) {
			if(data==null) {
				if(Player.getInventorySlot(i)==id) {
					Player.clearInventorySlot(i);
				}
			}
			else {
				if(Player.getInventorySlot(i)==id&&Player.getInventorySlotData(i)==data) {
					Player.clearInventorySlot(i);
				}
			}
		}
	}
	else {
		for(var i=0;i<=co[3];i++) {
			if(data==null) {
				if(Level.getChestSlot(co[0],co[1],co[2],i)==id) {
					Level.setChestSlot(co[0],co[1],co[2],i,0,0,0);
				}
			}
			else {
				if(Level.getChestSlot(co[0],co[1],co[2],i)==id&&Level.getChestSlotData(co[0],co[1],co[2],i)==data) {
					Level.setChestSlot(co[0],co[1],co[2],i,0,0,0);
				}
			}
		}
	}
}


/*SWITCHING FUNCTIONS*/


function count(id,isChest,inf) {
	var ans=0;
	if(isChest=="chest") {
		for(var i=0;i<=inf[3];i++) {
			for(var j=0;j<=id.length-1;j++) {
				if(typeof id[j]=="object") {
					if(Level.getChestSlot(inf[0],inf[1],inf[2],i)==id[j][0]&&Level.getChestSlotData(inf[0],inf[1],inf[2],i)==id[j][1]) {
						ans+=Level.getChestSlotCount(inf[0],inf[1],inf[2],i);
					}
				}
				else {
					if(Level.getChestSlot(inf[0],inf[1],inf[2],i)==id[j]) {
						ans+=Level.getChestSlotCount(inf[0],inf[1],inf[2],i);
					}
				}
			}
		}
	}
	else {
		for(var i=9;i<=44;i++) {
			for(var j=0;j<=id.length-1;j++) {
				if(typeof id[j]=="object") {
					if(Player.getInventorySlot(i)==id[j][0]&&Player.getInventorySlotData(i)==id[j][1]) {
						ans+=Player.getInventorySlotCount(i);
					}
				}
				else {
					if(Player.getInventorySlot(i)==id[j]) {
						ans+=Player.getInventorySlotCount(i);
					}
				}
			}
		}
	}
	return ans;
}

function idToName(id) {
	for(var m=0;m<=4;m++) {
		if(id==tools[6][m]) {
			return "hoe";
		}
		else if(id==tools[0][m]) {
			return "sword";
		}
		else if(id==tools[1][m]) {
			return "pickaxe";
		}
		else if(id==tools[2][m]) {
			return "axe";
		}
		else if(id==tools[3][m]) {
			return "shovel";
		}
	}
	if(id==tools[4][0]) {
		return "shears";
	}
	else if(id==tools[5][0]) {
		return "flint and steel";
	}
	else if(id>256) {
		return "random item";
	}
	else {
		return "block";
	}
}

function bestTool(type) {
	if(type=="sword") {
		return(analyse(tools[0]));
	}
	else if(type=="pickaxe") {
		return(analyse(tools[1]));
	}
	else if(type=="axe") {
		return(analyse(tools[2]));
	}
	else if(type=="shovel") {
		return(analyse(tools[3]));
	}
	else if(type=="flint and steel") {
		return(analyse(tools[5]));
	}
	else if(type=="shears") {
		return(analyse(tools[4]));
	}
}

function analyse(array) {
	var ans=[];
	for(var n=0;n<=array.length-1;n++) {
		for(var o=9;o<=44;o++) {
			if(Player.getInventorySlot(o)==array[n]) {
				ans=[o,Player.getInventorySlot(o),Player.getInventorySlotCount(o),Player.getInventorySlotData(o)];
			}
		}
	}
	return ans;
}

function switchTo(slot) {
	var dat=[Player.getSelectedSlotId(),Player.getInventorySlot(Player.getSelectedSlotId()),Player.getInventorySlotCount(Player.getSelectedSlotId()),Player.getInventorySlotData(Player.getSelectedSlotId())];
	if(getCarriedItem()!=0) {
		Entity.setCarriedItem(getPlayerEnt(),slot[1],slot[2],slot[3]);
	}
	else {
		addItemInventory(slot[1],slot[2],slot[3]);
	}
	Player.clearInventorySlot(slot[0]);
	if(dat[1]!=0) {
		Player.addItemInventory(dat[1],dat[2],dat[3]);
	}
	Level.addParticle(5,cords[0],cords[1],cords[2],0,0,0,2);
}

function analyseBlock(id) {
	for(var p=0;p<=blocks[0].length;p++) {
		if(id==blocks[0][p]) {
			return "pickaxe";
		}
	}
	for(var p=0;p<=blocks[1].length;p++) {
		if(id==blocks[1][p]) {
			return "axe";
		}
	}
	for(var p=0;p<=blocks[2].length;p++) {
		if(id==blocks[2][p]) {
			return "shovel";
		}
	}
	for(var p=0;p<=blocks[3].length;p++) {
		if(id==blocks[3][p]) {
			return "shears";
		}
	}
	if(id==blocks[4]) {
		return "flint and steel";
	}
}

function nameToId(name) {
	if(name=="sword") {
		return tools[0];
	}
	else if(name=="pickaxe") {
		return tools[1];
	}
	else if(name=="axe") {
		return tools[2];
	}
	else if(name=="shovel")	{
		return tools[3];
	}
	else if(name=="shears") {
		return tools[4];
	}
	else if(name=="flint and steel") {
		return tools[5];
	}
	else {
		return [];
	}
}

function correctTool(itemId,blockId,sword) {
	if(settings.smart_tools=="on") {
		if(itemId<=406&&itemId!=457&&itemId!=458&&itemId!=459/*&&GUI==null*/) {
			var toolNeeded;
			if(sword) {
				toolNeeded="sword";
			}
			else {
				toolNeeded=analyseBlock(blockId);
			}
			if(idToName(itemId)!=toolNeeded) {
				if(count(nameToId(toolNeeded))>0) {
					switchTo(bestTool(toolNeeded));
log.write("Switching to correct tool");
				}
				else {
					startCraft(defineNeededElements(toolNeeded));
				}
			}
		}
	}
}

function take(id,amount) {
	for(var k=9;k<=44;k++) {
		for(var l=0;l<=id.length-1;l++) {
			if(Player.getInventorySlot(k)==id[l]&&amount>0) {
				if(Player.getInventorySlotCount(k)<=amount) {
					amount-=Player.getInventorySlotCount(k);
					Player.clearInventorySlot(k);
				}
				else if(Player.getInventorySlotCount(k)>amount) {
					net.zhuoweizhang.mcpelauncher.ScriptManager.nativeSetInventorySlot(k,Player.getInventorySlot(k),Player.getInventorySlotCount(k)-amount,Player.getInventorySlotData(k));
				}
			}
		}
	}
}

function defineNeededElements(name) {
	if(name=="sword") {
		return [name,[[280,1]],2];
	}
	else if(name=="pickaxe"||name=="axe") {
		return [name,[[280,2]],3];
	}
	else if(name=="shovel") {
		return [name,[[280,2]],1];
	}
	else if(name=="flint and steel") {
		return [name,[[265,1],[318,1]]];
	}
	else if(name=="shears") {
		return [name,[[265,2]]];
	}
	else {
		return null;
	}
}

function startCraft(array) {
	if(array!=null) {
		var name=array[0],elements=array[1];
		if(array[2]!=null) {
			materials=array[2];
			var nm=findMaterials(array[2]);
			if(nm!=null) {
				array[1].push(nm);
				array[2]=null;
				startCraft(array);
			}
		}
		else {
			var ps=true;
			for(var r=0;r<=array[1].length-1;r++) {
				if(count([array[1][r][0]])<array[1][r][1]) {
					ps=false;
				}
			}
			if(ps&&/*GUI==null&&*/debug==0) {
				debug=5;
				craftUI(array);
log.write("Crafting possible, sending request.");
			}
		}
	}
}

function findMaterials(mt) {
	var rtn=null;
	if(count([264])>=mt) {
		rtn=264;
	}
	else if(count([265])>=mt) {
		rtn=265;
	}
	else if(count([4])>=mt) {
		rtn=4;
	}
	else if(count([266])>=mt) {
		rtn=266;
	}
	else if(count([5])>=mt) {
		rtn=5;
	}
	if(!rtn) {
		return null;
	}
	else {
		return [rtn,mt];
	}
}

function craft(tl) {
	for(var s=0;s<=tl[1].length-1;s++) {
		take([tl[1][s][0]],tl[1][s][1]);
	}
	if(tl[0]=="sword") {
		if(tl[1][1][0]==264) {
			drop(276);
		}
		else if(tl[1][1][0]==265) {
			drop(267);
		}
		else if(tl[1][1][0]==4) {
			drop(272);
		}
		else if(tl[1][1][0]==266) {
			drop(283);
		}
		else if(tl[1][1][0]==5) {
			drop(268);
		}
	}
	else if(tl[0]=="pickaxe") {
		if(tl[1][1][0]==264) {
			drop(278);
		}
		else if(tl[1][1][0]==265) {
			drop(257);
		}
		else if(tl[1][1][0]==4) {
			drop(274);
		}
		else if(tl[1][1][0]==266) {
			drop(285);
		}
		else if(tl[1][1][0]==5) {
			drop(270);
		}
	}
	else if(tl[0]=="axe") {
		if(tl[1][1][0]==264) {
			drop(279);
		}
		else if(tl[1][1][0]==265) {
			drop(258);
		}
		else if(tl[1][1][0]==4) {
			drop(275);
		}
		else if(tl[1][1][0]==266) {
			drop(286);
		}
		else if(tl[1][1][0]==5) {
			drop(271);
		}
	}
	else if(tl[0]=="shovel") {
		if(tl[1][1][0]==264) {
			drop(277);
		}
		else if(tl[1][1][0]==265) {
			drop(256);
		}
		else if(tl[1][1][0]==4) {
			drop(273);
		}
		else if(tl[1][1][0]==266) {
			drop(284);
		}
		else if(tl[1][1][0]==5) {
			drop(269);
		}
	}
	else if(tl[0]=="shears") {
		drop(359);
	}
	else if(tl[0]=="flint and steel") {
		drop(259);
	}
}

function drop(id,ct,dt) {
	if(ct>0) {
		Level.dropItem(Player.getX(),Player.getY(),Player.getZ(), 1, id, ct, dt);
	}
	else {
		Level.dropItem(Player.getX(),Player.getY(),Player.getZ(), 1, id, 1, 0);
	}
}






//GUI stuff

function deleteGUIb() {
	ctx.runOnUiThread(new java.lang.Runnable() {  
		run: function() {
			try {
				if(GUIb != null) {  
					GUIb.dismiss();
					GUIb=null
				}
			}
			catch(e) {
				log.e("dGUIb",e);
			}
		}  
	});
}

function deleteGUIop() {
	ctx.runOnUiThread(new java.lang.Runnable() {  
		run: function() {
			try {
				if(GUIop != null) {  
					GUIop.dismiss();
					GUIop=null
				}
			}
			catch(e) {
				log.e("dGUIop",e);
			}
		}  
	});
}

function deleteGUIup() {
	ctx.runOnUiThread(new java.lang.Runnable() {  
		run: function() {
			try {
				if(GUIup != null) {  
					GUIup.dismiss();
					GUIup=null
				}
			}
			catch(e) {
				log.e("dGUIup",e);
			}
		}  
	});
}

function deleteGUInt() {
	ctx.runOnUiThread(new java.lang.Runnable() {  
		run: function() {
			try {
				if(GUInt != null) {  
					GUInt.dismiss();
					GUInt=null
				}
			}
			catch(e) {
				log.e("dGUInt",e);
			}
		}  
	});
}



//Confirmation menu
function craftUI(tool) {
	ModPE.setGameSpeed(4);
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				var layout = new android.widget.LinearLayout(ctx); layout.setOrientation(1);
				
				var info = new android.widget.TextView(ctx);
				info.setGravity(android.view.Gravity.CENTER);
				info.setText("There's no "+tool[0]+" in your inventory.\nBut you have enough stuff to craft one.\nDo you want me to do it?\n");
				info.setTextColor(android.graphics.Color.WHITE);
				info.setTypeface(font);
				info.setTextSize(14);
				info.setLineSpacing(0, 1.15);
				layout.addView(info);
				
				var yesButton=mcButton("Ok, go on!");
				yesButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(viewarg) {
						craft(tool);
						ModPE.showTipMessage("Item crafted!");
						GUIcr.dismiss();
						GUIcr=null;
						ModPE.setGameSpeed(20);
						Level.playSoundEnt(getPlayerEnt(),"random.click",100,100);
					}
				});
				layout.addView(yesButton);
				
				var noButton=mcButton("Nope, thanks");
				noButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(viewarg) {
						ModPE.showTipMessage("You can disable this feature in the settings.");
						GUIcr.dismiss();
						GUIcr=null;
						ModPE.setGameSpeed(20);
						Level.playSoundEnt(getPlayerEnt(),"random.click",100,100);
					}
				});
				layout.addView(noButton);
				
				GUIcr = new android.widget.PopupWindow(layout, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				GUIcr.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				GUIcr.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);
				var container = GUIcr.getContentView().getParent();
				var wm = ctx.getSystemService(ctx.WINDOW_SERVICE);
				var p = container.getLayoutParams();
				p.flags = android.view.WindowManager.LayoutParams.FLAG_DIM_BEHIND;
				p.dimAmount = 0.5;
				wm.updateViewLayout(container,p);
				GUIcr.setOnDismissListener(function(){
						ModPE.setGameSpeed(20);
				});
			}
			catch(err) {
				log.e("shouldCraft menu",err);
			}
		}
	});
}




//Update menu
function updateTo(info) {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				pd.dismiss();
				
				var layout = new android.widget.LinearLayout(ctx);
				layout.setOrientation(1);
				var menuScroll = new android.widget.ScrollView(ctx);
				menuScroll.addView(layout);
				var layout1 = new android.widget.LinearLayout(ctx);
				layout1.setOrientation(1);
				layout1.addView(menuScroll);
				params = menuScroll.getLayoutParams();
				params.setMargins(15*dp,15*dp,15*dp,15*dp);
				menuScroll.setLayoutParams(params);

				var txt_0 = new android.widget.TextView(ctx);
				txt_0.setGravity(android.view.Gravity.CENTER);
				txt_0.setText("\nProject Alpha     \n");
				txt_0.setTextColor(android.graphics.Color.YELLOW);
				txt_0.setTypeface(font);
				txt_0.setTextSize(17);
				txt_0.setLineSpacing(0, 1.15);
				layout.addView(txt_0);
					
				var txt_1 = new android.widget.TextView(ctx);
				txt_1.setGravity(android.view.Gravity.CENTER);
				txt_1.setText("New version available :\n release "+info[0]+" dev"+info[1]+".\n\nChangelog :\n"+info[2]+"\n\nDo you want to install it now?\n");
				txt_1.setTextColor(android.graphics.Color.WHITE);
				txt_1.setTypeface(font);
				txt_1.setTextSize(14);
				txt_1.setLineSpacing(0, 1.15);
				layout.addView(txt_1);
				
				var yesButton=mcButton("Ok go on! (auto install)");
				yesButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(viewarg) {
						rewriteMod();
						GUIup.dismiss();
					}
				});
				layout.addView(yesButton);
				
				var noButton=mcButton("Nope, not now.");
				noButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(viewarg) {
						GUIup.dismiss();
					}
				});
				layout.addView(noButton);

				if(info[3]!="0"&&info[3]!=undefined) {
					var txt_2 = new android.widget.TextView(ctx);
					txt_2.setGravity(android.view.Gravity.CENTER);
					txt_2.setText("\n\n "+info[3]+"\n");
					txt_2.setTextColor(android.graphics.Color.WHITE);
					txt_2.setTypeface(font);
					txt_2.setTextSize(14);
					txt_2.setLineSpacing(0, 1.15);
					layout.addView(txt_2);
					
					if(info[4]!="0"&&info[4]!=undefined) {
						var moreButton=mcButton(info[4]);
						moreButton.setOnClickListener(new android.view.View.OnClickListener() {
							onClick: function(viewarg) {
								var intentBrowser = new android.content.Intent(ctx);
								intentBrowser.setAction(android.content.Intent.ACTION_VIEW);
								intentBrowser.setData(android.net.Uri.parse(info[5]));
								ctx.startActivity(intentBrowser);
							}
						});
						layout.addView(moreButton);
					}
				}
				
				GUIup = new android.widget.PopupWindow(layout1, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				GUIup.setBackgroundDrawable(bgDrawable);
				GUIup.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

var show = new android.view.animation.AlphaAnimation(0,1);
show.setDuration(200);
layout.startAnimation(show);
			}
			catch(err) {
				log.e("Update menu",err);
			}
		}
	});
}

function rewriteMod() {
	try {
		toast("Successfully updated the mod!");
		var mod=java.io.File(ctx.getDir("modscripts",0)+"/project_α.js");
		if(mod.exists()) {
			mod.delete;
			mod.createNewFile();
		}
		else {
			mod.createNewFile();
			toast("Now make sure you delete the old file.","red");
			toast("Now make sure you delete the old file.","red");
			toast("Now make sure you delete the old file.","red");
			toast("Now make sure you delete the old file.","red");
		}
		var fs = new java.io.PrintWriter(mod);
		fs.print(newCode);
		fs.close();
		net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(mod, true);
	}
	catch(e) {
		log.e("rewriting",e);
	}
}

//Network settings
function networkPreferencesGUI() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {

				var layout = new android.widget.LinearLayout(ctx);
				layout.setOrientation(1);
				var menuScroll = new android.widget.ScrollView(ctx);
				menuScroll.addView(layout);
				var layout1 = new android.widget.LinearLayout(ctx);
				layout1.setOrientation(1);
				layout1.addView(menuScroll);
				params = menuScroll.getLayoutParams();
				params.setMargins(15*dp,15*dp,15*dp,15*dp);
				menuScroll.setLayoutParams(params);

				var txt_0 = new android.widget.TextView(ctx);
				txt_0.setGravity(android.view.Gravity.CENTER);
				txt_0.setText("\nProject Alpha     \n");
				txt_0.setTextColor(android.graphics.Color.YELLOW);
				txt_0.setTypeface(font);
				txt_0.setTextSize(17);
				txt_0.setLineSpacing(0, 1.15);
				layout.addView(txt_0);
					
				var txt_1 = new android.widget.TextView(ctx);
				txt_1.setGravity(android.view.Gravity.CENTER);
				txt_1.setText("\nNetwork preferences for the auto-update :\nOnly check when connected to a Wifi network?\n");
				txt_1.setTextColor(android.graphics.Color.WHITE);
				txt_1.setTypeface(font);
				txt_1.setTextSize(14);
				txt_1.setLineSpacing(0, 1.15);
				layout.addView(txt_1);
				
				var yesButton=mcButton("Yes, only check on wifi");
				yesButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(viewarg) {
						settings.wifi_only=true;
						toast("Settings changed! Type '/delete data' in-game to reset them.");
						GUInt.dismiss();
						var ff=java.io.File(ctx.getDir("modscripts",0)+"/inventory_tweaks.js");
						if(ff.exists()) {
							leaveGame();
							net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(ff, true);
						}
						else {
							toast("Reload the mod now to check for updates.");
						}
					}
				});
				layout.addView(yesButton);
				
				var noButton=mcButton("No, use wifi and mobile!");
				noButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(viewarg) {
						toast("Settings saved! Type '/delete data' in-game to reset them.");
						GUInt.dismiss();
						var ff=java.io.File(ctx.getDir("modscripts",0)+"/inventory_tweaks.js");
						if(ff.exists()) {
							leaveGame();
							net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(ff, true);
						}
						else {
							toast("Reload the mod now to check for updates.");
						}
					}
				});
				layout.addView(noButton);

				var txt_2 = new android.widget.TextView(ctx);
				txt_2.setGravity(android.view.Gravity.CENTER);
				txt_2.setText("\n\n(Data size : < 4ko for normal check, < 300ko when downloading an update)");
				txt_2.setTextColor(android.graphics.Color.WHITE);
				txt_2.setTypeface(font);
				txt_2.setTextSize(14);
				txt_2.setLineSpacing(0, 1.15);
				layout.addView(txt_2);
				
				
				GUInt = new android.widget.PopupWindow(layout1, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				GUInt.setBackgroundDrawable(bgDrawable);
				GUInt.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);
			}
			catch(err) {
				log.e("network menu", err);
			}
		}
	});
}


//Tools
function toast(msg,color) {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function(){
			if(color==undefined) {
				android.widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>[Project Alpha]</b> "+msg), 0).show();
			}
			else {
				android.widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>[Project Alpha]</b> <font color=\""+color+"\"> "+msg), 0).show();
			}
		}
	});
}

function loadTxtFromUrl(url) {
	try {
		var content = new java.io.ByteArrayOutputStream();
		android.net.http.AndroidHttpClient.newInstance("userAgent").execute(new org.apache.http.client.methods.HttpGet(url)).getEntity().writeTo(content);
		content.close();
		return new String(content);
	}
	catch (e) {
		log.e("txtDownload",e);
		return "0 ; 0 ; Error";
	}
}

function booleanToString(b) {
	if(b)
		return "on";
	else
		return "off";
}
